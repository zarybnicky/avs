diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2ef0863..a67cde4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -173,6 +173,13 @@ list(APPEND AOM_WEBM_ENCODER_SOURCES "${AOM_ROOT}/common/webmenc.cc"
 include_directories(${AOM_ROOT} ${AOM_CONFIG_DIR} ${AOM_ROOT}/apps
                     ${AOM_ROOT}/common ${AOM_ROOT}/examples ${AOM_ROOT}/stats)
 
+SET_SOURCE_FILES_PROPERTIES(
+  "${AOM_ROOT}/aom_dsp/aom_convolve.c"
+  "${AOM_ROOT}/av1/common/convolve.c"
+  PROPERTIES
+  COMPILE_FLAGS "-qopenmp-simd -qopt-report=4 -qopt-report-phase=vec,loop"
+)
+
 # Targets
 add_library(aom_version ${AOM_VERSION_SOURCES})
 add_dummy_source_file_to_target(aom_version c)
diff --git a/aom_dsp/aom_convolve.c b/aom_dsp/aom_convolve.c
index 7879b88..e6478bc 100644
--- a/aom_dsp/aom_convolve.c
+++ b/aom_dsp/aom_convolve.c
@@ -38,17 +38,33 @@ static void convolve_horiz(const uint8_t *src, ptrdiff_t src_stride,
                            const InterpKernel *x_filters, int x0_q4,
                            int x_step_q4, int w, int h) {
   src -= SUBPEL_TAPS / 2 - 1;
-  for (int y = 0; y < h; ++y) {
-    int x_q4 = x0_q4;
-    for (int x = 0; x < w; ++x) {
-      const uint8_t *const src_x = &src[x_q4 >> SUBPEL_BITS];
-      const int16_t *const x_filter = x_filters[x_q4 & SUBPEL_MASK];
-      const int sum = horz_scalar_product(src_x, x_filter);
-      dst[x] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
-      x_q4 += x_step_q4;
+  if (x_step_q4 == (1 << SUBPEL_BITS)) {
+    const int16_t *const x_filter = x_filters[x0_q4 % (SUBPEL_MASK + 1)];
+    for (int y = 0; y < h; ++y) {
+      int x_q4 = x0_q4 / (SUBPEL_MASK + 1);
+      #pragma omp simd
+      for (int x = 0; x < w; ++x) {
+        const uint8_t *const src_x = &src[x_q4 + x];
+        const int sum = horz_scalar_product(src_x, x_filter);
+        dst[x] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
+      }
+      src += src_stride;
+      dst += dst_stride;
+    }
+  } else {
+    #pragma omp simd
+    for (int y = 0; y < h; ++y) {
+      int x_q4 = x0_q4;
+      for (int x = 0; x < w; ++x) {
+        const uint8_t *const src_x = &src[x_q4 >> SUBPEL_BITS];
+        const int16_t *const x_filter = x_filters[x_q4 & SUBPEL_MASK];
+        const int sum = horz_scalar_product(src_x, x_filter);
+        dst[x] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
+        x_q4 += x_step_q4;
+      }
+      src += src_stride;
+      dst += dst_stride;
     }
-    src += src_stride;
-    dst += dst_stride;
   }
 }
 
@@ -58,6 +74,7 @@ static void convolve_vert(const uint8_t *src, ptrdiff_t src_stride,
                           int y_step_q4, int w, int h) {
   src -= src_stride * (SUBPEL_TAPS / 2 - 1);
 
+  #pragma omp simd
   for (int x = 0; x < w; ++x) {
     int y_q4 = y0_q4;
     for (int y = 0; y < h; ++y) {
